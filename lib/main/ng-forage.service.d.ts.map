{"version":3,"file":"ng-forage.service.d.ts","sources":["C:/Users/Zero/bm4/node_modules/ngforage/lib/main/ng-forage.service.d.ts"],"sourcesContent":["import { BaseConfigurable } from '../config/base-configurable';\nimport { BaseConfigurableImpl } from '../config/base-configurable-impl.service';\nimport { NgForageOptions } from '../config/ng-forage-options';\nimport { DriverType } from '../misc/driver-type.type';\nimport { Driver } from '../misc/driver.enum';\n/**\n * Cache instance\n */\nexport declare class NgForage extends BaseConfigurableImpl implements BaseConfigurable {\n    /**\n     * Returns the name of the driver being used, or null if none can be used.\n     */\n    readonly activeDriver: DriverType;\n    /**\n     * Removes every key from the database, returning it to a blank slate.\n     *\n     * clear() will remove <b>every item in the offline store</b>. Use this method with caution.\n     */\n    clear(): Promise<void>;\n    /**\n     * Make a clone of the instance\n     * @param config Optional configuration\n     */\n    clone(config?: NgForageOptions): NgForage;\n    /**\n     * Gets an item from the storage library.\n     * If the key does not exist, getItem() will return null.\n     * @param key Data key\n     */\n    getItem<T>(key: string): Promise<T>;\n    /**\n     * Iterate over all value/key pairs in datastore.\n     * <i>iteratee</i> is called once for each pair, with the following arguments:\n     * <ol>\n     *   <li>Value</li>\n     *   <li>Key</li>\n     *   <li>iterationNumber - one-based number</li>\n     * </ol>\n     * iterate() supports early exit by returning non undefined value inside iteratorCallback callback.\n     * @param iteratee\n     */\n    iterate<T, U>(iteratee: (value: T, key: string, iterationNumber: number) => U): Promise<U>;\n    /**\n     * Get the name of a key based on its ID.\n     * @param index\n     */\n    key(index: number): Promise<string>;\n    /**\n     * Get the list of all keys in the datastore.\n     */\n    keys(): Promise<string[]>;\n    /**\n     * Gets the number of keys in the offline store (i.e. its “length”).\n     */\n    length(): Promise<number>;\n    /**\n     * Even though localForage queues up all of its data API method calls,\n     * ready() provides a way to determine whether the asynchronous driver initialization process has finished.\n     * That’s useful in cases like when we want to know which driver localForage has settled down using.\n     */\n    ready(): Promise<void>;\n    /**\n     * Removes the value of a key from the offline store.\n     * @param key Data key\n     */\n    removeItem(key: string): Promise<void>;\n    /**\n     * Saves data to an offline store. You can store the following types of JavaScript objects:\n     * <ul>\n     *  <li>Array</li>\n     *  <li>ArrayBuffer</li>\n     *  <li>Blob</li>\n     *  <li>Float32Array</li>\n     *  <li>Float64Array</li>\n     *  <li>Int8Array</li>\n     *  <li>Int16Array</li>\n     *  <li>Int32Array</li>\n     *  <li>Number</li>\n     *  <li>Object</li>\n     *  <li>Uint8Array</li>\n     *  <li>Uint8ClampedArray</li>\n     *  <li>Uint16Array</li>\n     *  <li>Uint32Array</li>\n     *  <li>String</li>\n     * </ul>\n     * @param key Data key\n     * @param data Data\n     */\n    setItem<T>(key: string, data: T): Promise<T>;\n    /**\n     * Check whether the given driver is supported/registered.\n     * @param driver Driver name\n     */\n    supports(driver: Driver | string): boolean;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsFA;"}
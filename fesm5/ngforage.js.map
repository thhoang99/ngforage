{"version":3,"file":"ngforage.js.map","sources":["ng://ngforage/lib/misc/setToStringTag.function.ts","ng://ngforage/lib/cache/cached-item-impl.class.ts","ng://ngforage/lib/imports/localforage.ts","ng://ngforage/lib/misc/driver.enum.ts","ng://ngforage/lib/misc/injection-tokens.ts","ng://ngforage/lib/config/ng-forage-config.service.ts","ng://ngforage/lib/instance-factory/instance-factory.service.ts","ng://ngforage/lib/config/base-configurable-impl.service.ts","ng://ngforage/lib/main/ng-forage.service.ts","ng://ngforage/lib/cache/ng-forage-cache.service.ts","ng://ngforage/lib/dedicated/ng-forage-cache-dedicated.class.ts","ng://ngforage/lib/dedicated/ng-forage-dedicated.class.ts","ng://ngforage/lib/dedicated/dedicated-instance-factory.service.ts","ng://ngforage/lib/NgForage.module.ts"],"sourcesContent":["/** @internal */\nexport function setToStringTag(clazz: Function, tag?: string): void {\n  Object.defineProperty(clazz.prototype, Symbol.toStringTag, {\n    configurable: false,\n    enumerable: false,\n    value: tag || clazz.name,\n    writable: false\n  });\n}\n","import {setToStringTag} from '../misc/setToStringTag.function';\nimport {CachedItem} from './cached-item';\n\n/** @internal */\nexport class CachedItemImpl<T> implements CachedItem<T> {\n\n  public readonly expires: Date;\n\n  public constructor(public readonly data: T, expiryTime: number) {\n    this.expires = new Date(typeof <any>expiryTime === 'number' ? expiryTime : 0);\n  }\n\n  public get expired(): boolean {\n    const value = this.expiresIn === 0;\n    if (value) {\n      Object.defineProperty(this, 'expired', {value});\n    }\n\n    return value;\n  }\n\n  public get expiresIn(): number {\n    const value = Math.max(0, this.expires.getTime() - Date.now());\n    if (!value) {\n      Object.defineProperty(this, 'expiresIn', {value});\n    }\n\n    return value;\n  }\n\n  public get hasData(): boolean {\n    const value = this.data != null; //tslint:disable-line:triple-equals\n    Object.defineProperty(this, 'hasData', {value});\n\n    return value;\n  }\n\n  public toJSON(): CachedItem<T> {\n    return {\n      data: this.data,\n      expired: this.expired,\n      expires: this.expires,\n      expiresIn: this.expiresIn,\n      hasData: this.hasData\n    };\n  }\n\n  public toString(): string {\n    return JSON.stringify(this.toJSON());\n  }\n}\n\nsetToStringTag(CachedItemImpl, 'CachedItem');\n","import * as lf from 'localforage';\n\n/** @internal */\nexport const localForage: LocalForage = 'defineDriver' in lf ? lf : lf['default'];\n","import {localForage as lf} from '../imports/localforage';\n\nexport enum Driver {\n  /** The IndexedDB driver */\n  INDEXED_DB = <any>lf.INDEXEDDB,\n  /** The localStorage driver */\n  LOCAL_STORAGE = <any>lf.LOCALSTORAGE,\n  /** The WebSQL driver */\n  WEB_SQL = <any>lf.WEBSQL\n}\n\nfor (const d of [lf.INDEXEDDB, lf.LOCALSTORAGE, lf.WEBSQL]) {\n  delete Driver[d];\n}\n\nObject.freeze(Driver);\n","import {InjectionToken} from '@angular/core';\nimport {NgForageOptions} from '../config/ng-forage-options';\n\nexport const DEFAULT_CONFIG = new InjectionToken<NgForageOptions>('Default NgForage config');\n","import {Inject, Injectable, Optional} from '@angular/core';\nimport 'localforage';\nimport {localForage as lf} from '../imports/localforage';\nimport {DriverType} from '../misc/driver-type.type';\nimport {Driver} from '../misc/driver.enum';\nimport {DEFAULT_CONFIG} from '../misc/injection-tokens';\nimport {setToStringTag} from '../misc/setToStringTag.function';\nimport {BaseConfigurable} from './base-configurable';\nimport {CacheConfigurable} from './cache-configurable';\nimport {NgForageOptions} from './ng-forage-options';\n\n/** @internal */\nconst $defaultConfig: unique symbol = Symbol('Default Config');\n\n/**\n * Global/default configuration\n */\n@Injectable({providedIn: 'root'})\nexport class NgForageConfig implements BaseConfigurable, CacheConfigurable {\n\n  /** @internal */\n  private readonly [$defaultConfig]: NgForageOptions;\n\n  public constructor(@Optional() @Inject(DEFAULT_CONFIG) conf: NgForageOptions) {\n    this[$defaultConfig] = {\n      cacheTime: 300000,\n      description: '',\n      driver: [Driver.INDEXED_DB, Driver.WEB_SQL, Driver.LOCAL_STORAGE],\n      name: 'ngForage',\n      size: 4980736,\n      storeName: 'ng_forage',\n      version: 1\n    };\n    if (conf) {\n      this.configure(conf);\n    }\n  }\n\n  /**\n   * Cache time in milliseconds\n   * @default 300000\n   */\n  public get cacheTime(): number {\n    return <number>this[$defaultConfig].cacheTime;\n  }\n\n  public set cacheTime(t: number) {\n    this[$defaultConfig].cacheTime = t;\n  }\n\n  /**\n   * Get the compiled configuration\n   */\n  public get config(): NgForageOptions {\n    return {\n      cacheTime: this.cacheTime,\n      description: this.description,\n      driver: this.driver,\n      name: this.name,\n      size: this.size,\n      storeName: this.storeName,\n      version: this.version\n    };\n  }\n\n  /**\n   * A description of the database, essentially for developer usage.\n   * @default\n   */\n  public get description(): string {\n    return <string>this[$defaultConfig].description;\n  }\n\n  public set description(v: string) {\n    this[$defaultConfig].description = v;\n  }\n\n  /**\n   * The preferred driver(s) to use.\n   */\n  public get driver(): DriverType | DriverType[] {\n    if (typeof this[$defaultConfig].driver === 'string') {\n      return <string>this[$defaultConfig].driver;\n    }\n\n    return (<string[]>this[$defaultConfig].driver).slice();\n  }\n\n  public set driver(v: DriverType | DriverType[]) {\n    this[$defaultConfig].driver = v;\n  }\n\n  /**\n   * The name of the database. May appear during storage limit prompts. Useful to use the name of your app here.\n   * In localStorage, this is used as a key prefix for all keys stored in localStorage.\n   * @default ngForage\n   */\n  public get name(): string {\n    return <string>this[$defaultConfig].name;\n  }\n\n  public set name(v: string) {\n    this[$defaultConfig].name = v;\n  }\n\n  /**\n   * The size of the database in bytes. Used only in WebSQL for now.\n   * @default 4980736\n   */\n  public get size(): number {\n    return <number>this[$defaultConfig].size;\n  }\n\n  public set size(v: number) {\n    this[$defaultConfig].size = v;\n  }\n\n  /**\n   * The name of the datastore.\n   * In IndexedDB this is the dataStore,\n   * in WebSQL this is the name of the key/value table in the database.\n   * Must be alphanumeric, with underscores.\n   * Any non-alphanumeric characters will be converted to underscores.\n   * @default ng_forage\n   */\n  public get storeName(): string {\n    return <string>this[$defaultConfig].storeName;\n  }\n\n  public set storeName(v: string) {\n    this[$defaultConfig].storeName = v;\n  }\n\n  /**\n   * The version of your database. May be used for upgrades in the future; currently unused.\n   * @default 1.0\n   */\n  public get version(): number {\n    return <number>this[$defaultConfig].version;\n  }\n\n  public set version(v: number) {\n    this[$defaultConfig].version = v;\n  }\n\n  /**\n   * Bulk-set configuration options\n   * @param opts The configuration\n   */\n  public configure(opts: NgForageOptions): this {\n    opts = opts || {};\n\n    if (opts.driver && (<any[]>opts.driver).slice) {\n      opts.driver = (<DriverType[]>opts.driver).slice();\n    }\n\n    Object.assign(this[$defaultConfig], opts);\n\n    return this;\n  }\n\n  /**\n   * Define a driver\n   *\n   * Youâll want to make sure you accept a callback argument and that you pass the same arguments to callbacks as the\n   * default drivers do. Youâll also want to resolve or reject promises.\n   * Check any of the {@link https://github.com/mozilla/localForage/tree/master/src/drivers default drivers}\n   * for an idea of how to implement your own, custom driver.\n   * @param spec Driver spec\n   */\n  public defineDriver(spec: LocalForageDriver): Promise<void> {\n    return lf.defineDriver(spec);\n  }\n\n  /** @internal */\n  public toJSON(): NgForageOptions {\n    return this.config;\n  }\n\n  public toString(): string {\n    return JSON.stringify(this.toJSON());\n  }\n}\n\nsetToStringTag(NgForageConfig);\n","import {Injectable} from '@angular/core';\nimport 'localforage';\nimport {NgForageConfig} from '../config/ng-forage-config.service';\nimport {NgForageOptions} from '../config/ng-forage-options';\nimport {localForage as lf} from '../imports/localforage';\nimport {DriverType} from '../misc/driver-type.type';\nimport {setToStringTag} from '../misc/setToStringTag.function';\n\n/** @internal */\ninterface InstanceMap {\n  [hash: string]: LocalForage;\n}\n\n/** @internal */\nconst stores: InstanceMap = {};\n\n/** @internal */\nfunction getDriverString(driver?: DriverType | DriverType[]): string {\n  if (!driver) {\n    return '';\n  } else if (Array.isArray(driver)) {\n    return driver.slice().sort().join(',');\n  } else {\n    return <string>driver;\n  }\n}\n\n/** @internal */\nfunction getHash(cfg: NgForageOptions): string {\n  return [\n    getDriverString(cfg.driver),\n    cfg.name,\n    cfg.size,\n    cfg.storeName,\n    cfg.version,\n    cfg.description,\n    cfg.cacheTime\n  ].join('|');\n}\n\n/** @internal */\nconst conf$ = Symbol('Config');\n\n/**\n * Creates localForage instances\n */\n@Injectable({providedIn: 'root'})\nexport class InstanceFactory {\n\n  /** @internal */\n  public constructor(conf: NgForageConfig) {\n    this[conf$] = conf;\n  }\n\n  public getInstance(cfg: NgForageOptions): LocalForage {\n    cfg = Object.assign({}, this[conf$].config, cfg || {});\n    const hash = getHash(cfg);\n\n    if (!stores[hash]) {\n      stores[hash] = lf.createInstance(cfg);\n    }\n\n    return stores[hash];\n  }\n}\n\nsetToStringTag(InstanceFactory);\n","import {Inject} from '@angular/core';\nimport 'localforage';\nimport {InstanceFactory} from '../instance-factory/instance-factory.service';\nimport {DriverType} from '../misc/driver-type.type';\nimport {setToStringTag} from '../misc/setToStringTag.function';\nimport {BaseConfigurable} from './base-configurable';\nimport {NgForageConfig} from './ng-forage-config.service';\nimport {NgForageOptions} from './ng-forage-options';\n\n/** @internal */\nconst store$: unique symbol = Symbol('Store');\n\n/**\n * Abstract service-level configuration layer for NgForage\n */\nexport abstract class BaseConfigurableImpl implements BaseConfigurable {\n\n  /** @internal */\n  protected readonly baseConfig: NgForageConfig;\n\n  /** @internal */\n  protected readonly config: NgForageOptions = {};\n\n  /** @internal */\n  protected readonly fact: InstanceFactory;\n\n  /** @internal */\n  protected storeNeedsRecalc: boolean;\n\n  /** @internal */\n  public constructor(@Inject(NgForageConfig) config: NgForageConfig,\n                     @Inject(InstanceFactory) instanceFactory: InstanceFactory) {\n    this.baseConfig = config;\n    this.fact = instanceFactory;\n  }\n\n  /**\n   * A description of the database, essentially for developer usage.\n   * @default \"\"\n   */\n  public get description(): string {\n    return this.config.description || this.baseConfig.description;\n  }\n\n  public set description(v: string) {\n    this.config.description = v;\n    this.storeNeedsRecalc = true;\n  }\n\n  /**\n   * The preferred driver(s) to use.\n   * @default IndexedDB, WebSQL and localStorage\n   */\n  public get driver(): DriverType | DriverType[] {\n    return this.config.driver || this.baseConfig.driver;\n  }\n\n  public set driver(v: DriverType | DriverType[]) {\n    this.config.driver = v;\n    this.storeNeedsRecalc = true;\n  }\n\n  /**\n   * The name of the database. May appear during storage limit prompts. Useful to use the name of your app here.\n   * In localStorage, this is used as a key prefix for all keys stored in localStorage.\n   * @default ngForage\n   */\n  public get name(): string {\n    return this.config.name || this.baseConfig.name;\n  }\n\n  public set name(v: string) {\n    this.config.name = v;\n    this.storeNeedsRecalc = true;\n  }\n\n  /**\n   * The size of the database in bytes. Used only in WebSQL for now.\n   * @default 4980736\n   */\n  public get size(): number {\n    return this.config.size || this.baseConfig.size;\n  }\n\n  public set size(v: number) {\n    this.config.size = v;\n    this.storeNeedsRecalc = true;\n  }\n\n  /**\n   * The name of the datastore.\n   * In IndexedDB this is the dataStore,\n   * in WebSQL this is the name of the key/value table in the database.\n   * Must be alphanumeric, with underscores.\n   * Any non-alphanumeric characters will be converted to underscores.\n   * @default ng_forage\n   */\n  public get storeName(): string {\n    return this.config.storeName || this.baseConfig.storeName;\n  }\n\n  public set storeName(v: string) {\n    this.config.storeName = v;\n    this.storeNeedsRecalc = true;\n  }\n\n  /**\n   * The version of your database. May be used for upgrades in the future; currently unused.\n   * @default 1.0\n   */\n  public get version(): number {\n    return 'version' in this.config ? <number>this.config.version : this.baseConfig.version;\n  }\n\n  public set version(v: number) {\n    this.config.version = v;\n    this.storeNeedsRecalc = true;\n  }\n\n  /** @internal */\n  protected get finalConfig(): NgForageOptions {\n    return Object.assign(\n      {},\n      this.baseConfig.config,\n      this.config\n    );\n  }\n\n  /** @internal */\n  protected get store(): LocalForage {\n    if (this.storeNeedsRecalc || !this[store$]) {\n      this[store$] = this.fact.getInstance(this.finalConfig);\n      this.storeNeedsRecalc = false;\n    }\n\n    return this[store$];\n  }\n\n  /**\n   * Bulk-set configuration options\n   * @param opts The configuration\n   */\n  public configure(opts: NgForageOptions): this {\n    opts = opts || {};\n\n    if (Array.isArray(opts.driver)) {\n      opts.driver = opts.driver.slice();\n    }\n\n    Object.assign(this.config, opts);\n    this.storeNeedsRecalc = true;\n\n    return this;\n  }\n\n  public toJSON(): Partial<NgForageOptions> {\n    return {\n      description: this.description,\n      driver: this.driver,\n      name: this.name,\n      size: this.size,\n      storeName: this.storeName,\n      version: this.version\n    };\n  }\n\n  public toString(): string {\n    return JSON.stringify(this.toJSON());\n  }\n}\n\nsetToStringTag(BaseConfigurableImpl, 'BaseConfigurable');\nObject.defineProperty(<any>BaseConfigurableImpl, 'storeNeedsRecalc', {\n  configurable: true,\n  enumerable: true,\n  value: true,\n  writable: true\n});\n","import {Injectable} from '@angular/core';\nimport {BaseConfigurable} from '../config/base-configurable';\nimport {BaseConfigurableImpl} from '../config/base-configurable-impl.service';\nimport {NgForageOptions} from '../config/ng-forage-options';\nimport {DriverType} from '../misc/driver-type.type';\nimport {Driver} from '../misc/driver.enum';\nimport {setToStringTag} from '../misc/setToStringTag.function';\n\n/**\n * Cache instance\n */\n@Injectable({providedIn: 'root'})\nexport class NgForage extends BaseConfigurableImpl implements BaseConfigurable {\n\n  /**\n   * Returns the name of the driver being used, or null if none can be used.\n   */\n  public get activeDriver(): DriverType {\n    return this.store.driver();\n  }\n\n  /**\n   * Removes every key from the database, returning it to a blank slate.\n   *\n   * clear() will remove <b>every item in the offline store</b>. Use this method with caution.\n   */\n  public clear(): Promise<void> {\n    return this.store.clear();\n  }\n\n  /**\n   * Make a clone of the instance\n   * @param config Optional configuration\n   */\n  public clone(config?: NgForageOptions): NgForage {\n    const inst = new NgForage(this.baseConfig, this.fact);\n    inst.configure(Object.assign(this.finalConfig, config || {}));\n\n    return inst;\n  }\n\n  /**\n   * Gets an item from the storage library.\n   * If the key does not exist, getItem() will return null.\n   * @param key Data key\n   */\n  public getItem<T>(key: string): Promise<T> {\n    return this.store.getItem<T>(key);\n  }\n\n  /**\n   * Iterate over all value/key pairs in datastore.\n   * <i>iteratee</i> is called once for each pair, with the following arguments:\n   * <ol>\n   *   <li>Value</li>\n   *   <li>Key</li>\n   *   <li>iterationNumber - one-based number</li>\n   * </ol>\n   * iterate() supports early exit by returning non undefined value inside iteratorCallback callback.\n   * @param iteratee\n   */\n  public iterate<T, U>(iteratee: (value: T, key: string, iterationNumber: number) => U): Promise<U> {\n    return this.store.iterate(iteratee);\n  }\n\n  /**\n   * Get the name of a key based on its ID.\n   * @param index\n   */\n  public key(index: number): Promise<string> {\n    return this.store.key(index);\n  }\n\n  /**\n   * Get the list of all keys in the datastore.\n   */\n  public keys(): Promise<string[]> {\n    return this.store.keys();\n  }\n\n  /**\n   * Gets the number of keys in the offline store (i.e. its âlengthâ).\n   */\n  public length(): Promise<number> {\n    return this.store.length();\n  }\n\n  /**\n   * Even though localForage queues up all of its data API method calls,\n   * ready() provides a way to determine whether the asynchronous driver initialization process has finished.\n   * Thatâs useful in cases like when we want to know which driver localForage has settled down using.\n   */\n  public ready(): Promise<void> {\n    return this.store.ready();\n  }\n\n  /**\n   * Removes the value of a key from the offline store.\n   * @param key Data key\n   */\n  public removeItem(key: string): Promise<void> {\n    return this.store.removeItem(key);\n  }\n\n  /**\n   * Saves data to an offline store. You can store the following types of JavaScript objects:\n   * <ul>\n   *  <li>Array</li>\n   *  <li>ArrayBuffer</li>\n   *  <li>Blob</li>\n   *  <li>Float32Array</li>\n   *  <li>Float64Array</li>\n   *  <li>Int8Array</li>\n   *  <li>Int16Array</li>\n   *  <li>Int32Array</li>\n   *  <li>Number</li>\n   *  <li>Object</li>\n   *  <li>Uint8Array</li>\n   *  <li>Uint8ClampedArray</li>\n   *  <li>Uint16Array</li>\n   *  <li>Uint32Array</li>\n   *  <li>String</li>\n   * </ul>\n   * @param key Data key\n   * @param data Data\n   */\n  public setItem<T>(key: string, data: T): Promise<T> {\n    return this.store.setItem<T>(key, data);\n  }\n\n  /**\n   * Check whether the given driver is supported/registered.\n   * @param driver Driver name\n   */\n  public supports(driver: Driver | string): boolean {\n    return this.store.supports(<string>driver);\n  }\n}\n\nsetToStringTag(NgForage);\n","import {Injectable} from '@angular/core';\nimport {CacheConfigurable} from '../config/cache-configurable';\nimport {NgForageOptions} from '../config/ng-forage-options';\nimport {NgForage} from '../main/ng-forage.service';\nimport {setToStringTag} from '../misc/setToStringTag.function';\nimport {CachedItem} from './cached-item';\nimport {CachedItemImpl} from './cached-item-impl.class';\n\n/** @internal */\ninterface CacheKeys {\n  data: string;\n\n  expiry: string;\n}\n\n/** @internal */\nfunction calculateCacheKeys(mainKey: string): CacheKeys {\n  return {\n    data: `${mainKey}_data`,\n    expiry: `${mainKey}_expiry`\n  };\n}\n\n/** @internal */\nfunction toCachedItem<T>(r: [T, number]): CachedItem<T> {\n  return new CachedItemImpl<T>(r[0], r[1]);\n}\n\n/** @internal */\nfunction head<T>(r: [T, number]) {\n  return r[0];\n}\n\n/** @internal */\n// tslint:disable-next-line:no-empty\nfunction toVoid(): void {\n\n}\n\n/**\n * An extension of {@link NgForage} which adds expiration support\n */\n@Injectable({providedIn: 'root'})\nexport class NgForageCache extends NgForage implements CacheConfigurable {\n\n  /**\n   * Cache time in milliseconds\n   * @default 300000\n   */\n  public get cacheTime(): number {\n    return this.config.cacheTime || this.baseConfig.cacheTime;\n  }\n\n  public set cacheTime(t: number) {\n    this.config.cacheTime = t;\n    this.storeNeedsRecalc = true;\n  }\n\n  /** @inheritDoc */\n  public clone(config?: NgForageOptions): NgForageCache {\n    const inst = new NgForageCache(this.baseConfig, this.fact);\n    inst.configure(Object.assign(this.finalConfig, config || {}));\n\n    return inst;\n  }\n\n  /**\n   * Retrieve data\n   * @param key Data key\n   */\n  public getCached<T>(key: string): Promise<CachedItem<T>> {\n    const keys = calculateCacheKeys(key);\n    const dataPromise = this.getItem<T>(keys.data);\n    const expiryPromise = this.getItem<number>(keys.expiry);\n\n    return Promise.all([dataPromise, expiryPromise]).then(toCachedItem);\n  }\n\n  /**\n   * Remove data\n   * @param key Data key\n   */\n  public removeCached(key: string): Promise<void> {\n    const keys = calculateCacheKeys(key);\n\n    const dataPromise = this.removeItem(keys.data);\n    const expiryPromise = this.removeItem(keys.expiry);\n\n    return Promise.all([dataPromise, expiryPromise]).then(toVoid);\n  }\n\n  /**\n   * Set data\n   * @param key Data key\n   * @param data Data to set\n   * @param [cacheTime] Override cache set in {@link CacheConfigurable#cacheTime global or instance config}.\n   */\n  public setCached<T>(key: string, data: T, cacheTime?: number): Promise<T> {\n    const keys = calculateCacheKeys(key);\n    const expiry = typeof cacheTime === 'number' ? cacheTime : this.cacheTime;\n\n    const dataPromise = this.setItem<T>(keys.data, data);\n    const expiryPromise = this.setItem<number>(keys.expiry, Date.now() + expiry);\n\n    return Promise.all([dataPromise, expiryPromise]).then(head);\n  }\n\n  /** @internal */\n  public toJSON(): NgForageOptions {\n    const ass: Partial<NgForageOptions> = {cacheTime: this.cacheTime};\n\n    return Object.assign(super.toJSON(), ass);\n  }\n}\n\nsetToStringTag(NgForageCache);\n","import {NgForageCache} from '../cache/ng-forage-cache.service';\nimport {NgForageOptions} from '../config/ng-forage-options';\nimport {setToStringTag} from '../misc/setToStringTag.function';\n\n/** @internal */\nexport class NgForageCacheDedicated extends NgForageCache {\n\n  public clone(config?: NgForageOptions): NgForageCache {\n    const inst = new NgForageCacheDedicated(this.baseConfig, this.fact);\n    inst.configure(Object.assign(this.finalConfig, config || {}));\n\n    return inst;\n  }\n}\n\nsetToStringTag(NgForageCacheDedicated, 'NgForageCache (dedicated)');\n","import {NgForageOptions} from '../config/ng-forage-options';\nimport {NgForage} from '../main/ng-forage.service';\nimport {setToStringTag} from '../misc/setToStringTag.function';\n\n/** @internal */\nexport class NgForageDedicated extends NgForage {\n\n  public clone(config?: NgForageOptions): NgForage {\n    const inst = new NgForageDedicated(this.baseConfig, this.fact);\n    inst.configure(Object.assign(this.finalConfig, config || {}));\n\n    return inst;\n  }\n}\n\nsetToStringTag(NgForageDedicated, 'NgForage (dedicated)');\n","import {Injectable} from '@angular/core';\nimport {NgForageCache} from '../cache/ng-forage-cache.service';\nimport {NgForageConfig} from '../config/ng-forage-config.service';\nimport {NgForageOptions} from '../config/ng-forage-options';\nimport {InstanceFactory} from '../instance-factory/instance-factory.service';\nimport {NgForage} from '../main/ng-forage.service';\nimport {setToStringTag} from '../misc/setToStringTag.function';\nimport {NgForageCacheDedicated} from './ng-forage-cache-dedicated.class';\nimport {NgForageDedicated} from './ng-forage-dedicated.class';\n\n/** @internal */\nconst conf$: unique symbol = Symbol('NgForageConfig');\n/** @internal */\nconst if$: unique symbol = Symbol('InstanceFactory');\n\n@Injectable({providedIn: 'root'})\nexport class DedicatedInstanceFactory {\n\n  /** @internal */\n  private readonly [conf$]: NgForageConfig;\n\n  /** @internal */\n  private readonly [if$]: InstanceFactory;\n\n  public constructor(conf: NgForageConfig, instFact: InstanceFactory) {\n    this[conf$] = conf;\n    this[if$] = instFact;\n  }\n\n  public createCache(config?: NgForageOptions): NgForageCache {\n    const inst = new NgForageCacheDedicated(this[conf$], this[if$]);\n    if (config) {\n      inst.configure(config);\n    }\n\n    return inst;\n  }\n\n  public createNgForage(config?: NgForageOptions): NgForage {\n    const inst = new NgForageDedicated(this[conf$], this[if$]);\n    if (config) {\n      inst.configure(config);\n    }\n\n    return inst;\n  }\n}\n\nsetToStringTag(DedicatedInstanceFactory);\n","import {ModuleWithProviders, NgModule} from '@angular/core';\nimport {NgForageOptions} from './config/ng-forage-options';\nimport {DEFAULT_CONFIG} from './misc/injection-tokens';\n\n/**\n * NgForage core module\n */\n@NgModule({})\nexport class NgForageModule {\n\n  // istanbul ignore next\n  public static forRoot(config?: Partial<NgForageOptions>): ModuleWithProviders {\n    return {\n      ngModule: NgForageModule,\n      providers: [\n        {\n          provide: DEFAULT_CONFIG,\n          useValue: config ? Object.assign({}, config) : {}\n        }\n      ]\n    };\n  }\n}\n"],"names":["lf['default']","lf","tslib_1.__values","tslib_1.__extends","conf$"],"mappings":"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"}

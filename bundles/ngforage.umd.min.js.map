{"version":3,"sources":["ng://ngforage/lib/misc/setToStringTag.function.ts","ng://ngforage/lib/cache/cached-item-impl.class.ts","node_modules/tslib/tslib.es6.js","ng://ngforage/lib/imports/localforage.ts","ng://ngforage/lib/misc/driver.enum.ts","ng://ngforage/lib/misc/injection-tokens.ts","ng://ngforage/lib/config/ng-forage-config.service.ts","ng://ngforage/lib/instance-factory/instance-factory.service.ts","ng://ngforage/lib/config/base-configurable-impl.service.ts","ng://ngforage/lib/main/ng-forage.service.ts","ng://ngforage/lib/cache/ng-forage-cache.service.ts","ng://ngforage/lib/dedicated/ng-forage-cache-dedicated.class.ts","ng://ngforage/lib/dedicated/ng-forage-dedicated.class.ts","ng://ngforage/lib/dedicated/dedicated-instance-factory.service.ts","ng://ngforage/lib/NgForage.module.ts"],"names":["setToStringTag","clazz","tag","Object","defineProperty","prototype","Symbol","toStringTag","configurable","enumerable","value","name","writable","CachedItemImpl","data","expiryTime","this","expires","Date","expiresIn","Math","max","getTime","now","toJSON","expired","hasData","toString","JSON","stringify","extendStatics","d","b","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","create","localForage","lf","lf['default']","INDEXED_DB","LOCAL_STORAGE","WEB_SQL","_b","__values","o","m","iterator","i","call","next","length","done","tslib_1.__values","INDEXEDDB","LOCALSTORAGE","WEBSQL","_c","Driver","freeze","DEFAULT_CONFIG","InjectionToken","$defaultConfig","NgForageConfig","conf","cacheTime","description","driver","size","storeName","version","configure","t","v","slice","opts","assign","defineDriver","spec","config","Injectable","args","providedIn","Optional","type","Inject","stores","getHash","cfg","getDriverString","isArray","sort","join","conf$","InstanceFactory","getInstance","hash","createInstance","store$","BaseConfigurableImpl","instanceFactory","baseConfig","fact","storeNeedsRecalc","finalConfig","decorators","NgForage","_super","tslib_1.__extends","store","clear","clone","inst","getItem","key","iterate","iteratee","index","keys","ready","removeItem","setItem","supports","calculateCacheKeys","mainKey","expiry","toCachedItem","r","head","toVoid","NgForageCache","getCached","dataPromise","expiryPromise","Promise","all","then","removeCached","setCached","ass","NgForageCacheDedicated","NgForageDedicated","if$","DedicatedInstanceFactory","instFact","createCache","createNgForage","NgForageModule","forRoot","ngModule","providers","provide","useValue","NgModule"],"mappings":"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","sourcesContent":["/** @internal */\nexport function setToStringTag(clazz: Function, tag?: string): void {\n  Object.defineProperty(clazz.prototype, Symbol.toStringTag, {\n    configurable: false,\n    enumerable: false,\n    value: tag || clazz.name,\n    writable: false\n  });\n}\n","import {setToStringTag} from '../misc/setToStringTag.function';\nimport {CachedItem} from './cached-item';\n\n/** @internal */\nexport class CachedItemImpl<T> implements CachedItem<T> {\n\n  public readonly expires: Date;\n\n  public constructor(public readonly data: T, expiryTime: number) {\n    this.expires = new Date(typeof <any>expiryTime === 'number' ? expiryTime : 0);\n  }\n\n  public get expired(): boolean {\n    const value = this.expiresIn === 0;\n    if (value) {\n      Object.defineProperty(this, 'expired', {value});\n    }\n\n    return value;\n  }\n\n  public get expiresIn(): number {\n    const value = Math.max(0, this.expires.getTime() - Date.now());\n    if (!value) {\n      Object.defineProperty(this, 'expiresIn', {value});\n    }\n\n    return value;\n  }\n\n  public get hasData(): boolean {\n    const value = this.data != null; //tslint:disable-line:triple-equals\n    Object.defineProperty(this, 'hasData', {value});\n\n    return value;\n  }\n\n  public toJSON(): CachedItem<T> {\n    return {\n      data: this.data,\n      expired: this.expired,\n      expires: this.expires,\n      expiresIn: this.expiresIn,\n      hasData: this.hasData\n    };\n  }\n\n  public toString(): string {\n    return JSON.stringify(this.toJSON());\n  }\n}\n\nsetToStringTag(CachedItemImpl, 'CachedItem');\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import * as lf from 'localforage';\n\n/** @internal */\nexport const localForage: LocalForage = 'defineDriver' in lf ? lf : lf['default'];\n","import {localForage as lf} from '../imports/localforage';\n\nexport enum Driver {\n  /** The IndexedDB driver */\n  INDEXED_DB = <any>lf.INDEXEDDB,\n  /** The localStorage driver */\n  LOCAL_STORAGE = <any>lf.LOCALSTORAGE,\n  /** The WebSQL driver */\n  WEB_SQL = <any>lf.WEBSQL\n}\n\nfor (const d of [lf.INDEXEDDB, lf.LOCALSTORAGE, lf.WEBSQL]) {\n  delete Driver[d];\n}\n\nObject.freeze(Driver);\n","import {InjectionToken} from '@angular/core';\nimport {NgForageOptions} from '../config/ng-forage-options';\n\nexport const DEFAULT_CONFIG = new InjectionToken<NgForageOptions>('Default NgForage config');\n","import {Inject, Injectable, Optional} from '@angular/core';\nimport 'localforage';\nimport {localForage as lf} from '../imports/localforage';\nimport {DriverType} from '../misc/driver-type.type';\nimport {Driver} from '../misc/driver.enum';\nimport {DEFAULT_CONFIG} from '../misc/injection-tokens';\nimport {setToStringTag} from '../misc/setToStringTag.function';\nimport {BaseConfigurable} from './base-configurable';\nimport {CacheConfigurable} from './cache-configurable';\nimport {NgForageOptions} from './ng-forage-options';\n\n/** @internal */\nconst $defaultConfig: unique symbol = Symbol('Default Config');\n\n/**\n * Global/default configuration\n */\n@Injectable({providedIn: 'root'})\nexport class NgForageConfig implements BaseConfigurable, CacheConfigurable {\n\n  /** @internal */\n  private readonly [$defaultConfig]: NgForageOptions;\n\n  public constructor(@Optional() @Inject(DEFAULT_CONFIG) conf: NgForageOptions) {\n    this[$defaultConfig] = {\n      cacheTime: 300000,\n      description: '',\n      driver: [Driver.INDEXED_DB, Driver.WEB_SQL, Driver.LOCAL_STORAGE],\n      name: 'ngForage',\n      size: 4980736,\n      storeName: 'ng_forage',\n      version: 1\n    };\n    if (conf) {\n      this.configure(conf);\n    }\n  }\n\n  /**\n   * Cache time in milliseconds\n   * @default 300000\n   */\n  public get cacheTime(): number {\n    return <number>this[$defaultConfig].cacheTime;\n  }\n\n  public set cacheTime(t: number) {\n    this[$defaultConfig].cacheTime = t;\n  }\n\n  /**\n   * Get the compiled configuration\n   */\n  public get config(): NgForageOptions {\n    return {\n      cacheTime: this.cacheTime,\n      description: this.description,\n      driver: this.driver,\n      name: this.name,\n      size: this.size,\n      storeName: this.storeName,\n      version: this.version\n    };\n  }\n\n  /**\n   * A description of the database, essentially for developer usage.\n   * @default\n   */\n  public get description(): string {\n    return <string>this[$defaultConfig].description;\n  }\n\n  public set description(v: string) {\n    this[$defaultConfig].description = v;\n  }\n\n  /**\n   * The preferred driver(s) to use.\n   */\n  public get driver(): DriverType | DriverType[] {\n    if (typeof this[$defaultConfig].driver === 'string') {\n      return <string>this[$defaultConfig].driver;\n    }\n\n    return (<string[]>this[$defaultConfig].driver).slice();\n  }\n\n  public set driver(v: DriverType | DriverType[]) {\n    this[$defaultConfig].driver = v;\n  }\n\n  /**\n   * The name of the database. May appear during storage limit prompts. Useful to use the name of your app here.\n   * In localStorage, this is used as a key prefix for all keys stored in localStorage.\n   * @default ngForage\n   */\n  public get name(): string {\n    return <string>this[$defaultConfig].name;\n  }\n\n  public set name(v: string) {\n    this[$defaultConfig].name = v;\n  }\n\n  /**\n   * The size of the database in bytes. Used only in WebSQL for now.\n   * @default 4980736\n   */\n  public get size(): number {\n    return <number>this[$defaultConfig].size;\n  }\n\n  public set size(v: number) {\n    this[$defaultConfig].size = v;\n  }\n\n  /**\n   * The name of the datastore.\n   * In IndexedDB this is the dataStore,\n   * in WebSQL this is the name of the key/value table in the database.\n   * Must be alphanumeric, with underscores.\n   * Any non-alphanumeric characters will be converted to underscores.\n   * @default ng_forage\n   */\n  public get storeName(): string {\n    return <string>this[$defaultConfig].storeName;\n  }\n\n  public set storeName(v: string) {\n    this[$defaultConfig].storeName = v;\n  }\n\n  /**\n   * The version of your database. May be used for upgrades in the future; currently unused.\n   * @default 1.0\n   */\n  public get version(): number {\n    return <number>this[$defaultConfig].version;\n  }\n\n  public set version(v: number) {\n    this[$defaultConfig].version = v;\n  }\n\n  /**\n   * Bulk-set configuration options\n   * @param opts The configuration\n   */\n  public configure(opts: NgForageOptions): this {\n    opts = opts || {};\n\n    if (opts.driver && (<any[]>opts.driver).slice) {\n      opts.driver = (<DriverType[]>opts.driver).slice();\n    }\n\n    Object.assign(this[$defaultConfig], opts);\n\n    return this;\n  }\n\n  /**\n   * Define a driver\n   *\n   * Youâll want to make sure you accept a callback argument and that you pass the same arguments to callbacks as the\n   * default drivers do. Youâll also want to resolve or reject promises.\n   * Check any of the {@link https://github.com/mozilla/localForage/tree/master/src/drivers default drivers}\n   * for an idea of how to implement your own, custom driver.\n   * @param spec Driver spec\n   */\n  public defineDriver(spec: LocalForageDriver): Promise<void> {\n    return lf.defineDriver(spec);\n  }\n\n  /** @internal */\n  public toJSON(): NgForageOptions {\n    return this.config;\n  }\n\n  public toString(): string {\n    return JSON.stringify(this.toJSON());\n  }\n}\n\nsetToStringTag(NgForageConfig);\n","import {Injectable} from '@angular/core';\nimport 'localforage';\nimport {NgForageConfig} from '../config/ng-forage-config.service';\nimport {NgForageOptions} from '../config/ng-forage-options';\nimport {localForage as lf} from '../imports/localforage';\nimport {DriverType} from '../misc/driver-type.type';\nimport {setToStringTag} from '../misc/setToStringTag.function';\n\n/** @internal */\ninterface InstanceMap {\n  [hash: string]: LocalForage;\n}\n\n/** @internal */\nconst stores: InstanceMap = {};\n\n/** @internal */\nfunction getDriverString(driver?: DriverType | DriverType[]): string {\n  if (!driver) {\n    return '';\n  } else if (Array.isArray(driver)) {\n    return driver.slice().sort().join(',');\n  } else {\n    return <string>driver;\n  }\n}\n\n/** @internal */\nfunction getHash(cfg: NgForageOptions): string {\n  return [\n    getDriverString(cfg.driver),\n    cfg.name,\n    cfg.size,\n    cfg.storeName,\n    cfg.version,\n    cfg.description,\n    cfg.cacheTime\n  ].join('|');\n}\n\n/** @internal */\nconst conf$ = Symbol('Config');\n\n/**\n * Creates localForage instances\n */\n@Injectable({providedIn: 'root'})\nexport class InstanceFactory {\n\n  /** @internal */\n  public constructor(conf: NgForageConfig) {\n    this[conf$] = conf;\n  }\n\n  public getInstance(cfg: NgForageOptions): LocalForage {\n    cfg = Object.assign({}, this[conf$].config, cfg || {});\n    const hash = getHash(cfg);\n\n    if (!stores[hash]) {\n      stores[hash] = lf.createInstance(cfg);\n    }\n\n    return stores[hash];\n  }\n}\n\nsetToStringTag(InstanceFactory);\n","import {Inject} from '@angular/core';\nimport 'localforage';\nimport {InstanceFactory} from '../instance-factory/instance-factory.service';\nimport {DriverType} from '../misc/driver-type.type';\nimport {setToStringTag} from '../misc/setToStringTag.function';\nimport {BaseConfigurable} from './base-configurable';\nimport {NgForageConfig} from './ng-forage-config.service';\nimport {NgForageOptions} from './ng-forage-options';\n\n/** @internal */\nconst store$: unique symbol = Symbol('Store');\n\n/**\n * Abstract service-level configuration layer for NgForage\n */\nexport abstract class BaseConfigurableImpl implements BaseConfigurable {\n\n  /** @internal */\n  protected readonly baseConfig: NgForageConfig;\n\n  /** @internal */\n  protected readonly config: NgForageOptions = {};\n\n  /** @internal */\n  protected readonly fact: InstanceFactory;\n\n  /** @internal */\n  protected storeNeedsRecalc: boolean;\n\n  /** @internal */\n  public constructor(@Inject(NgForageConfig) config: NgForageConfig,\n                     @Inject(InstanceFactory) instanceFactory: InstanceFactory) {\n    this.baseConfig = config;\n    this.fact = instanceFactory;\n  }\n\n  /**\n   * A description of the database, essentially for developer usage.\n   * @default \"\"\n   */\n  public get description(): string {\n    return this.config.description || this.baseConfig.description;\n  }\n\n  public set description(v: string) {\n    this.config.description = v;\n    this.storeNeedsRecalc = true;\n  }\n\n  /**\n   * The preferred driver(s) to use.\n   * @default IndexedDB, WebSQL and localStorage\n   */\n  public get driver(): DriverType | DriverType[] {\n    return this.config.driver || this.baseConfig.driver;\n  }\n\n  public set driver(v: DriverType | DriverType[]) {\n    this.config.driver = v;\n    this.storeNeedsRecalc = true;\n  }\n\n  /**\n   * The name of the database. May appear during storage limit prompts. Useful to use the name of your app here.\n   * In localStorage, this is used as a key prefix for all keys stored in localStorage.\n   * @default ngForage\n   */\n  public get name(): string {\n    return this.config.name || this.baseConfig.name;\n  }\n\n  public set name(v: string) {\n    this.config.name = v;\n    this.storeNeedsRecalc = true;\n  }\n\n  /**\n   * The size of the database in bytes. Used only in WebSQL for now.\n   * @default 4980736\n   */\n  public get size(): number {\n    return this.config.size || this.baseConfig.size;\n  }\n\n  public set size(v: number) {\n    this.config.size = v;\n    this.storeNeedsRecalc = true;\n  }\n\n  /**\n   * The name of the datastore.\n   * In IndexedDB this is the dataStore,\n   * in WebSQL this is the name of the key/value table in the database.\n   * Must be alphanumeric, with underscores.\n   * Any non-alphanumeric characters will be converted to underscores.\n   * @default ng_forage\n   */\n  public get storeName(): string {\n    return this.config.storeName || this.baseConfig.storeName;\n  }\n\n  public set storeName(v: string) {\n    this.config.storeName = v;\n    this.storeNeedsRecalc = true;\n  }\n\n  /**\n   * The version of your database. May be used for upgrades in the future; currently unused.\n   * @default 1.0\n   */\n  public get version(): number {\n    return 'version' in this.config ? <number>this.config.version : this.baseConfig.version;\n  }\n\n  public set version(v: number) {\n    this.config.version = v;\n    this.storeNeedsRecalc = true;\n  }\n\n  /** @internal */\n  protected get finalConfig(): NgForageOptions {\n    return Object.assign(\n      {},\n      this.baseConfig.config,\n      this.config\n    );\n  }\n\n  /** @internal */\n  protected get store(): LocalForage {\n    if (this.storeNeedsRecalc || !this[store$]) {\n      this[store$] = this.fact.getInstance(this.finalConfig);\n      this.storeNeedsRecalc = false;\n    }\n\n    return this[store$];\n  }\n\n  /**\n   * Bulk-set configuration options\n   * @param opts The configuration\n   */\n  public configure(opts: NgForageOptions): this {\n    opts = opts || {};\n\n    if (Array.isArray(opts.driver)) {\n      opts.driver = opts.driver.slice();\n    }\n\n    Object.assign(this.config, opts);\n    this.storeNeedsRecalc = true;\n\n    return this;\n  }\n\n  public toJSON(): Partial<NgForageOptions> {\n    return {\n      description: this.description,\n      driver: this.driver,\n      name: this.name,\n      size: this.size,\n      storeName: this.storeName,\n      version: this.version\n    };\n  }\n\n  public toString(): string {\n    return JSON.stringify(this.toJSON());\n  }\n}\n\nsetToStringTag(BaseConfigurableImpl, 'BaseConfigurable');\nObject.defineProperty(<any>BaseConfigurableImpl, 'storeNeedsRecalc', {\n  configurable: true,\n  enumerable: true,\n  value: true,\n  writable: true\n});\n","import {Injectable} from '@angular/core';\nimport {BaseConfigurable} from '../config/base-configurable';\nimport {BaseConfigurableImpl} from '../config/base-configurable-impl.service';\nimport {NgForageOptions} from '../config/ng-forage-options';\nimport {DriverType} from '../misc/driver-type.type';\nimport {Driver} from '../misc/driver.enum';\nimport {setToStringTag} from '../misc/setToStringTag.function';\n\n/**\n * Cache instance\n */\n@Injectable({providedIn: 'root'})\nexport class NgForage extends BaseConfigurableImpl implements BaseConfigurable {\n\n  /**\n   * Returns the name of the driver being used, or null if none can be used.\n   */\n  public get activeDriver(): DriverType {\n    return this.store.driver();\n  }\n\n  /**\n   * Removes every key from the database, returning it to a blank slate.\n   *\n   * clear() will remove <b>every item in the offline store</b>. Use this method with caution.\n   */\n  public clear(): Promise<void> {\n    return this.store.clear();\n  }\n\n  /**\n   * Make a clone of the instance\n   * @param config Optional configuration\n   */\n  public clone(config?: NgForageOptions): NgForage {\n    const inst = new NgForage(this.baseConfig, this.fact);\n    inst.configure(Object.assign(this.finalConfig, config || {}));\n\n    return inst;\n  }\n\n  /**\n   * Gets an item from the storage library.\n   * If the key does not exist, getItem() will return null.\n   * @param key Data key\n   */\n  public getItem<T>(key: string): Promise<T> {\n    return this.store.getItem<T>(key);\n  }\n\n  /**\n   * Iterate over all value/key pairs in datastore.\n   * <i>iteratee</i> is called once for each pair, with the following arguments:\n   * <ol>\n   *   <li>Value</li>\n   *   <li>Key</li>\n   *   <li>iterationNumber - one-based number</li>\n   * </ol>\n   * iterate() supports early exit by returning non undefined value inside iteratorCallback callback.\n   * @param iteratee\n   */\n  public iterate<T, U>(iteratee: (value: T, key: string, iterationNumber: number) => U): Promise<U> {\n    return this.store.iterate(iteratee);\n  }\n\n  /**\n   * Get the name of a key based on its ID.\n   * @param index\n   */\n  public key(index: number): Promise<string> {\n    return this.store.key(index);\n  }\n\n  /**\n   * Get the list of all keys in the datastore.\n   */\n  public keys(): Promise<string[]> {\n    return this.store.keys();\n  }\n\n  /**\n   * Gets the number of keys in the offline store (i.e. its âlengthâ).\n   */\n  public length(): Promise<number> {\n    return this.store.length();\n  }\n\n  /**\n   * Even though localForage queues up all of its data API method calls,\n   * ready() provides a way to determine whether the asynchronous driver initialization process has finished.\n   * Thatâs useful in cases like when we want to know which driver localForage has settled down using.\n   */\n  public ready(): Promise<void> {\n    return this.store.ready();\n  }\n\n  /**\n   * Removes the value of a key from the offline store.\n   * @param key Data key\n   */\n  public removeItem(key: string): Promise<void> {\n    return this.store.removeItem(key);\n  }\n\n  /**\n   * Saves data to an offline store. You can store the following types of JavaScript objects:\n   * <ul>\n   *  <li>Array</li>\n   *  <li>ArrayBuffer</li>\n   *  <li>Blob</li>\n   *  <li>Float32Array</li>\n   *  <li>Float64Array</li>\n   *  <li>Int8Array</li>\n   *  <li>Int16Array</li>\n   *  <li>Int32Array</li>\n   *  <li>Number</li>\n   *  <li>Object</li>\n   *  <li>Uint8Array</li>\n   *  <li>Uint8ClampedArray</li>\n   *  <li>Uint16Array</li>\n   *  <li>Uint32Array</li>\n   *  <li>String</li>\n   * </ul>\n   * @param key Data key\n   * @param data Data\n   */\n  public setItem<T>(key: string, data: T): Promise<T> {\n    return this.store.setItem<T>(key, data);\n  }\n\n  /**\n   * Check whether the given driver is supported/registered.\n   * @param driver Driver name\n   */\n  public supports(driver: Driver | string): boolean {\n    return this.store.supports(<string>driver);\n  }\n}\n\nsetToStringTag(NgForage);\n","import {Injectable} from '@angular/core';\nimport {CacheConfigurable} from '../config/cache-configurable';\nimport {NgForageOptions} from '../config/ng-forage-options';\nimport {NgForage} from '../main/ng-forage.service';\nimport {setToStringTag} from '../misc/setToStringTag.function';\nimport {CachedItem} from './cached-item';\nimport {CachedItemImpl} from './cached-item-impl.class';\n\n/** @internal */\ninterface CacheKeys {\n  data: string;\n\n  expiry: string;\n}\n\n/** @internal */\nfunction calculateCacheKeys(mainKey: string): CacheKeys {\n  return {\n    data: `${mainKey}_data`,\n    expiry: `${mainKey}_expiry`\n  };\n}\n\n/** @internal */\nfunction toCachedItem<T>(r: [T, number]): CachedItem<T> {\n  return new CachedItemImpl<T>(r[0], r[1]);\n}\n\n/** @internal */\nfunction head<T>(r: [T, number]) {\n  return r[0];\n}\n\n/** @internal */\n// tslint:disable-next-line:no-empty\nfunction toVoid(): void {\n\n}\n\n/**\n * An extension of {@link NgForage} which adds expiration support\n */\n@Injectable({providedIn: 'root'})\nexport class NgForageCache extends NgForage implements CacheConfigurable {\n\n  /**\n   * Cache time in milliseconds\n   * @default 300000\n   */\n  public get cacheTime(): number {\n    return this.config.cacheTime || this.baseConfig.cacheTime;\n  }\n\n  public set cacheTime(t: number) {\n    this.config.cacheTime = t;\n    this.storeNeedsRecalc = true;\n  }\n\n  /** @inheritDoc */\n  public clone(config?: NgForageOptions): NgForageCache {\n    const inst = new NgForageCache(this.baseConfig, this.fact);\n    inst.configure(Object.assign(this.finalConfig, config || {}));\n\n    return inst;\n  }\n\n  /**\n   * Retrieve data\n   * @param key Data key\n   */\n  public getCached<T>(key: string): Promise<CachedItem<T>> {\n    const keys = calculateCacheKeys(key);\n    const dataPromise = this.getItem<T>(keys.data);\n    const expiryPromise = this.getItem<number>(keys.expiry);\n\n    return Promise.all([dataPromise, expiryPromise]).then(toCachedItem);\n  }\n\n  /**\n   * Remove data\n   * @param key Data key\n   */\n  public removeCached(key: string): Promise<void> {\n    const keys = calculateCacheKeys(key);\n\n    const dataPromise = this.removeItem(keys.data);\n    const expiryPromise = this.removeItem(keys.expiry);\n\n    return Promise.all([dataPromise, expiryPromise]).then(toVoid);\n  }\n\n  /**\n   * Set data\n   * @param key Data key\n   * @param data Data to set\n   * @param [cacheTime] Override cache set in {@link CacheConfigurable#cacheTime global or instance config}.\n   */\n  public setCached<T>(key: string, data: T, cacheTime?: number): Promise<T> {\n    const keys = calculateCacheKeys(key);\n    const expiry = typeof cacheTime === 'number' ? cacheTime : this.cacheTime;\n\n    const dataPromise = this.setItem<T>(keys.data, data);\n    const expiryPromise = this.setItem<number>(keys.expiry, Date.now() + expiry);\n\n    return Promise.all([dataPromise, expiryPromise]).then(head);\n  }\n\n  /** @internal */\n  public toJSON(): NgForageOptions {\n    const ass: Partial<NgForageOptions> = {cacheTime: this.cacheTime};\n\n    return Object.assign(super.toJSON(), ass);\n  }\n}\n\nsetToStringTag(NgForageCache);\n","import {NgForageCache} from '../cache/ng-forage-cache.service';\nimport {NgForageOptions} from '../config/ng-forage-options';\nimport {setToStringTag} from '../misc/setToStringTag.function';\n\n/** @internal */\nexport class NgForageCacheDedicated extends NgForageCache {\n\n  public clone(config?: NgForageOptions): NgForageCache {\n    const inst = new NgForageCacheDedicated(this.baseConfig, this.fact);\n    inst.configure(Object.assign(this.finalConfig, config || {}));\n\n    return inst;\n  }\n}\n\nsetToStringTag(NgForageCacheDedicated, 'NgForageCache (dedicated)');\n","import {NgForageOptions} from '../config/ng-forage-options';\nimport {NgForage} from '../main/ng-forage.service';\nimport {setToStringTag} from '../misc/setToStringTag.function';\n\n/** @internal */\nexport class NgForageDedicated extends NgForage {\n\n  public clone(config?: NgForageOptions): NgForage {\n    const inst = new NgForageDedicated(this.baseConfig, this.fact);\n    inst.configure(Object.assign(this.finalConfig, config || {}));\n\n    return inst;\n  }\n}\n\nsetToStringTag(NgForageDedicated, 'NgForage (dedicated)');\n","import {Injectable} from '@angular/core';\nimport {NgForageCache} from '../cache/ng-forage-cache.service';\nimport {NgForageConfig} from '../config/ng-forage-config.service';\nimport {NgForageOptions} from '../config/ng-forage-options';\nimport {InstanceFactory} from '../instance-factory/instance-factory.service';\nimport {NgForage} from '../main/ng-forage.service';\nimport {setToStringTag} from '../misc/setToStringTag.function';\nimport {NgForageCacheDedicated} from './ng-forage-cache-dedicated.class';\nimport {NgForageDedicated} from './ng-forage-dedicated.class';\n\n/** @internal */\nconst conf$: unique symbol = Symbol('NgForageConfig');\n/** @internal */\nconst if$: unique symbol = Symbol('InstanceFactory');\n\n@Injectable({providedIn: 'root'})\nexport class DedicatedInstanceFactory {\n\n  /** @internal */\n  private readonly [conf$]: NgForageConfig;\n\n  /** @internal */\n  private readonly [if$]: InstanceFactory;\n\n  public constructor(conf: NgForageConfig, instFact: InstanceFactory) {\n    this[conf$] = conf;\n    this[if$] = instFact;\n  }\n\n  public createCache(config?: NgForageOptions): NgForageCache {\n    const inst = new NgForageCacheDedicated(this[conf$], this[if$]);\n    if (config) {\n      inst.configure(config);\n    }\n\n    return inst;\n  }\n\n  public createNgForage(config?: NgForageOptions): NgForage {\n    const inst = new NgForageDedicated(this[conf$], this[if$]);\n    if (config) {\n      inst.configure(config);\n    }\n\n    return inst;\n  }\n}\n\nsetToStringTag(DedicatedInstanceFactory);\n","import {ModuleWithProviders, NgModule} from '@angular/core';\nimport {NgForageOptions} from './config/ng-forage-options';\nimport {DEFAULT_CONFIG} from './misc/injection-tokens';\n\n/**\n * NgForage core module\n */\n@NgModule({})\nexport class NgForageModule {\n\n  // istanbul ignore next\n  public static forRoot(config?: Partial<NgForageOptions>): ModuleWithProviders {\n    return {\n      ngModule: NgForageModule,\n      providers: [\n        {\n          provide: DEFAULT_CONFIG,\n          useValue: config ? Object.assign({}, config) : {}\n        }\n      ]\n    };\n  }\n}\n"]}
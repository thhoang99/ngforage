{"version":3,"sources":["C:/Users/Zero/bm4/node_modules/ngforage/fesm5/ngforage.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;AAoBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAsbM,AAGA;;;;;;;;;;;;;;;yRAKwN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA2ExN,AAGA;;;;;;;;;;iFAKykkBzN,AAGA;;;;;;;yKACsN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA4LtN,AAGA;;;;;;;uHAC0O;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAkJ1O,AAGA;;;;;;;;;;;gIAMsR;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAoDtR;;;;;;+IAGA","file":"ngforage.js","sourcesContent":["import * as lf from 'localforage';\nimport lf__default, {  } from 'localforage';\nimport { __values, __extends } from 'tslib';\nimport { InjectionToken, Inject, Injectable, Optional, NgModule, defineInjectable, inject } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@internal\n * @param {?} clazz\n * @param {?=} tag\n * @return {?}\n */\nfunction setToStringTag(clazz, tag) {\n    Object.defineProperty(clazz.prototype, Symbol.toStringTag, {\n        configurable: false,\n        enumerable: false,\n        value: tag || clazz.name,\n        writable: false\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@internal\n * @template T\n */\nvar  /**\n * \\@internal\n * @template T\n */\nCachedItemImpl = /** @class */ (function () {\n    function CachedItemImpl(data, expiryTime) {\n        this.data = data;\n        this.expires = new Date(typeof (/** @type {?} */ (expiryTime)) === 'number' ? expiryTime : 0);\n    }\n    Object.defineProperty(CachedItemImpl.prototype, \"expired\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var value = this.expiresIn === 0;\n            if (value) {\n                Object.defineProperty(this, 'expired', { value: value });\n            }\n            return value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CachedItemImpl.prototype, \"expiresIn\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var value = Math.max(0, this.expires.getTime() - Date.now());\n            if (!value) {\n                Object.defineProperty(this, 'expiresIn', { value: value });\n            }\n            return value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CachedItemImpl.prototype, \"hasData\", {\n        get: /**\n         * @return {?}\n         */\n        function () {\n            /** @type {?} */\n            var value = this.data != null;\n            Object.defineProperty(this, 'hasData', { value: value });\n            return value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    CachedItemImpl.prototype.toJSON = /**\n     * @return {?}\n     */\n    function () {\n        return {\n            data: this.data,\n            expired: this.expired,\n            expires: this.expires,\n            expiresIn: this.expiresIn,\n            hasData: this.hasData\n        };\n    };\n    /**\n     * @return {?}\n     */\n    CachedItemImpl.prototype.toString = /**\n     * @return {?}\n     */\n    function () {\n        return JSON.stringify(this.toJSON());\n    };\n    return CachedItemImpl;\n}());\nsetToStringTag(CachedItemImpl, 'CachedItem');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@internal\n * @type {?}\n */\nvar localForage = 'defineDriver' in lf ? lf : lf__default;\n\nvar e_1, _a;\n/** @enum {string} */\nvar Driver = {\n    /** The IndexedDB driver */\n    INDEXED_DB: (/** @type {?} */ (localForage.INDEXEDDB)),\n    /** The localStorage driver */\n    LOCAL_STORAGE: (/** @type {?} */ (localForage.LOCALSTORAGE)),\n    /** The WebSQL driver */\n    WEB_SQL: (/** @type {?} */ (localForage.WEBSQL)),\n};\ntry {\n    for (var _b = __values([localForage.INDEXEDDB, localForage.LOCALSTORAGE, localForage.WEBSQL]), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var d = _c.value;\n        delete Driver[d];\n    }\n}\ncatch (e_1_1) { e_1 = { error: e_1_1 }; }\nfinally {\n    try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    }\n    finally { if (e_1) throw e_1.error; }\n}\nObject.freeze(Driver);\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nvar DEFAULT_CONFIG = new InjectionToken('Default NgForage config');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@internal\n * @type {?}\n */\nvar $defaultConfig = Symbol('Default Config');\n/**\n * Global/default configuration\n */\nvar NgForageConfig = /** @class */ (function () {\n    function NgForageConfig(conf) {\n        this[$defaultConfig] = {\n            cacheTime: 300000,\n            description: '',\n            driver: [Driver.INDEXED_DB, Driver.WEB_SQL, Driver.LOCAL_STORAGE],\n            name: 'ngForage',\n            size: 4980736,\n            storeName: 'ng_forage',\n            version: 1\n        };\n        if (conf) {\n            this.configure(conf);\n        }\n    }\n    Object.defineProperty(NgForageConfig.prototype, \"cacheTime\", {\n        /**\n         * Cache time in milliseconds\n         * @default 300000\n         */\n        get: /**\n         * Cache time in milliseconds\n         * \\@default 300000\n         * @return {?}\n         */\n        function () {\n            return (/** @type {?} */ (this[$defaultConfig].cacheTime));\n        },\n        set: /**\n         * @param {?} t\n         * @return {?}\n         */\n        function (t) {\n            this[$defaultConfig].cacheTime = t;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgForageConfig.prototype, \"config\", {\n        /**\n         * Get the compiled configuration\n         */\n        get: /**\n         * Get the compiled configuration\n         * @return {?}\n         */\n        function () {\n            return {\n                cacheTime: this.cacheTime,\n                description: this.description,\n                driver: this.driver,\n                name: this.name,\n                size: this.size,\n                storeName: this.storeName,\n                version: this.version\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgForageConfig.prototype, \"description\", {\n        /**\n         * A description of the database, essentially for developer usage.\n         * @default\n         */\n        get: /**\n         * A description of the database, essentially for developer usage.\n         * \\@default\n         * @return {?}\n         */\n        function () {\n            return (/** @type {?} */ (this[$defaultConfig].description));\n        },\n        set: /**\n         * @param {?} v\n         * @return {?}\n         */\n        function (v) {\n            this[$defaultConfig].description = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgForageConfig.prototype, \"driver\", {\n        /**\n         * The preferred driver(s) to use.\n         */\n        get: /**\n         * The preferred driver(s) to use.\n         * @return {?}\n         */\n        function () {\n            if (typeof this[$defaultConfig].driver === 'string') {\n                return (/** @type {?} */ (this[$defaultConfig].driver));\n            }\n            return ((/** @type {?} */ (this[$defaultConfig].driver))).slice();\n        },\n        set: /**\n         * @param {?} v\n         * @return {?}\n         */\n        function (v) {\n            this[$defaultConfig].driver = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgForageConfig.prototype, \"name\", {\n        /**\n         * The name of the database. May appear during storage limit prompts. Useful to use the name of your app here.\n         * In localStorage, this is used as a key prefix for all keys stored in localStorage.\n         * @default ngForage\n         */\n        get: /**\n         * The name of the database. May appear during storage limit prompts. Useful to use the name of your app here.\n         * In localStorage, this is used as a key prefix for all keys stored in localStorage.\n         * \\@default ngForage\n         * @return {?}\n         */\n        function () {\n            return (/** @type {?} */ (this[$defaultConfig].name));\n        },\n        set: /**\n         * @param {?} v\n         * @return {?}\n         */\n        function (v) {\n            this[$defaultConfig].name = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgForageConfig.prototype, \"size\", {\n        /**\n         * The size of the database in bytes. Used only in WebSQL for now.\n         * @default 4980736\n         */\n        get: /**\n         * The size of the database in bytes. Used only in WebSQL for now.\n         * \\@default 4980736\n         * @return {?}\n         */\n        function () {\n            return (/** @type {?} */ (this[$defaultConfig].size));\n        },\n        set: /**\n         * @param {?} v\n         * @return {?}\n         */\n        function (v) {\n            this[$defaultConfig].size = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgForageConfig.prototype, \"storeName\", {\n        /**\n         * The name of the datastore.\n         * In IndexedDB this is the dataStore,\n         * in WebSQL this is the name of the key/value table in the database.\n         * Must be alphanumeric, with underscores.\n         * Any non-alphanumeric characters will be converted to underscores.\n         * @default ng_forage\n         */\n        get: /**\n         * The name of the datastore.\n         * In IndexedDB this is the dataStore,\n         * in WebSQL this is the name of the key/value table in the database.\n         * Must be alphanumeric, with underscores.\n         * Any non-alphanumeric characters will be converted to underscores.\n         * \\@default ng_forage\n         * @return {?}\n         */\n        function () {\n            return (/** @type {?} */ (this[$defaultConfig].storeName));\n        },\n        set: /**\n         * @param {?} v\n         * @return {?}\n         */\n        function (v) {\n            this[$defaultConfig].storeName = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(NgForageConfig.prototype, \"version\", {\n        /**\n         * The version of your database. May be used for upgrades in the future; currently unused.\n         * @default 1.0\n         */\n        get: /**\n         * The version of your database. May be used for upgrades in the future; currently unused.\n         * \\@default 1.0\n         * @return {?}\n         */\n        function () {\n            return (/** @type {?} */ (this[$defaultConfig].version));\n        },\n        set: /**\n         * @param {?} v\n         * @return {?}\n         */\n        function (v) {\n            this[$defaultConfig].version = v;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Bulk-set configuration options\n     * @param opts The configuration\n     */\n    /**\n     * Bulk-set configuration options\n     * @template THIS\n     * @this {THIS}\n     * @param {?} opts The configuration\n     * @return {THIS}\n     */\n    NgForageConfig.prototype.configure = /**\n     * Bulk-set configuration options\n     * @template THIS\n     * @this {THIS}\n     * @param {?} opts The configuration\n     * @return {THIS}\n     */\n    function (opts) {\n        opts = opts || {};\n        if (opts.driver && ((/** @type {?} */ (opts.driver))).slice) {\n            opts.driver = ((/** @type {?} */ (opts.driver))).slice();\n        }\n        Object.assign((/** @type {?} */ (this))[$defaultConfig], opts);\n        return (/** @type {?} */ (this));\n    };\n    /**\n     * Define a driver\n     *\n     * You’ll want to make sure you accept a callback argument and that you pass the same arguments to callbacks as the\n     * default drivers do. You’ll also want to resolve or reject promises.\n     * Check any of the {@link https://github.com/mozilla/localForage/tree/master/src/drivers default drivers}\n     * for an idea of how to implement your own, custom driver.\n     * @param spec Driver spec\n     */\n    /**\n     * Define a driver\n     *\n     * You’ll want to make sure you accept a callback argument and that you pass the same arguments to callbacks as the\n     * default drivers do. You’ll also want to resolve or reject promises.\n     * Check any of the {\\@link https://github.com/mozilla/localForage/tree/master/src/drivers default drivers}\n     * for an idea of how to implement your own, custom driver.\n     * @param {?} spec Driver spec\n     * @return {?}\n     */\n    NgForageConfig.prototype.defineDriver = /**\n     * Define a driver\n     *\n     * You’ll want to make sure you accept a callback argument and that you pass the same arguments to callbacks as the\n     * default drivers do. You’ll also want to resolve or reject promises.\n     * Check any of the {\\@link https://github.com/mozilla/localForage/tree/master/src/drivers default drivers}\n     * for an idea of how to implement your own, custom driver.\n     * @param {?} spec Driver spec\n     * @return {?}\n     */\n    function (spec) {\n        return localForage.defineDriver(spec);\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    NgForageConfig.prototype.toJSON = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        return this.config;\n    };\n    /**\n     * @return {?}\n     */\n    NgForageConfig.prototype.toString = /**\n     * @return {?}\n     */\n    function () {\n        return JSON.stringify(this.toJSON());\n    };\n    NgForageConfig.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] }\n    ];\n    /** @nocollapse */\n    NgForageConfig.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DEFAULT_CONFIG,] }] }\n    ]; };\n    /** @nocollapse */ NgForageConfig.ngInjectableDef = defineInjectable({ factory: function NgForageConfig_Factory() { return new NgForageConfig(inject(DEFAULT_CONFIG, 8)); }, token: NgForageConfig, providedIn: \"root\" });\n    return NgForageConfig;\n}());\nsetToStringTag(NgForageConfig);\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@internal\n * @type {?}\n */\nvar stores = {};\n/**\n * \\@internal\n * @param {?=} driver\n * @return {?}\n */\nfunction getDriverString(driver) {\n    if (!driver) {\n        return '';\n    }\n    else if (Array.isArray(driver)) {\n        return driver.slice().sort().join(',');\n    }\n    else {\n        return (/** @type {?} */ (driver));\n    }\n}\n/**\n * \\@internal\n * @param {?} cfg\n * @return {?}\n */\nfunction getHash(cfg) {\n    return [\n        getDriverString(cfg.driver),\n        cfg.name,\n        cfg.size,\n        cfg.storeName,\n        cfg.version,\n        cfg.description,\n        cfg.cacheTime\n    ].join('|');\n}\n/**\n * \\@internal\n * @type {?}\n */\nvar conf$ = Symbol('Config');\n/**\n * Creates localForage instances\n */\nvar InstanceFactory = /** @class */ (function () {\n    /** @internal */\n    function InstanceFactory(conf) {\n        this[conf$] = conf;\n    }\n    /**\n     * @param {?} cfg\n     * @return {?}\n     */\n    InstanceFactory.prototype.getInstance = /**\n     * @param {?} cfg\n     * @return {?}\n     */\n    function (cfg) {\n        cfg = Object.assign({}, this[conf$].config, cfg || {});\n        /** @type {?} */\n        var hash = getHash(cfg);\n        if (!stores[hash]) {\n            stores[hash] = localForage.createInstance(cfg);\n        }\n        return stores[hash];\n    };\n    InstanceFactory.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] }\n    ];\n    /** @nocollapse */\n    InstanceFactory.ctorParameters = function () { return [\n        { type: NgForageConfig }\n    ]; };\n    /** @nocollapse */ InstanceFactory.ngInjectableDef = defineInjectable({ factory: function InstanceFactory_Factory() { return new InstanceFactory(inject(NgForageConfig)); }, token: InstanceFactory, providedIn: \"root\" });\n    return InstanceFactory;\n}());\nsetToStringTag(InstanceFactory);\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@internal\n * @type {?}\n */\nvar store$ = Symbol('Store');\n/**\n * Abstract service-level configuration layer for NgForage\n * @abstract\n */\nvar BaseConfigurableImpl = /** @class */ (function () {\n    /** @internal */\n    function BaseConfigurableImpl(config, instanceFactory) {\n        /**\n         * \\@internal\n         */\n        this.config = {};\n        this.baseConfig = config;\n        this.fact = instanceFactory;\n    }\n    Object.defineProperty(BaseConfigurableImpl.prototype, \"description\", {\n        /**\n         * A description of the database, essentially for developer usage.\n         * @default \"\"\n         */\n        get: /**\n         * A description of the database, essentially for developer usage.\n         * \\@default \"\"\n         * @return {?}\n         */\n        function () {\n            return this.config.description || this.baseConfig.description;\n        },\n        set: /**\n         * @param {?} v\n         * @return {?}\n         */\n        function (v) {\n            this.config.description = v;\n            this.storeNeedsRecalc = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BaseConfigurableImpl.prototype, \"driver\", {\n        /**\n         * The preferred driver(s) to use.\n         * @default IndexedDB, WebSQL and localStorage\n         */\n        get: /**\n         * The preferred driver(s) to use.\n         * \\@default IndexedDB, WebSQL and localStorage\n         * @return {?}\n         */\n        function () {\n            return this.config.driver || this.baseConfig.driver;\n        },\n        set: /**\n         * @param {?} v\n         * @return {?}\n         */\n        function (v) {\n            this.config.driver = v;\n            this.storeNeedsRecalc = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BaseConfigurableImpl.prototype, \"name\", {\n        /**\n         * The name of the database. May appear during storage limit prompts. Useful to use the name of your app here.\n         * In localStorage, this is used as a key prefix for all keys stored in localStorage.\n         * @default ngForage\n         */\n        get: /**\n         * The name of the database. May appear during storage limit prompts. Useful to use the name of your app here.\n         * In localStorage, this is used as a key prefix for all keys stored in localStorage.\n         * \\@default ngForage\n         * @return {?}\n         */\n        function () {\n            return this.config.name || this.baseConfig.name;\n        },\n        set: /**\n         * @param {?} v\n         * @return {?}\n         */\n        function (v) {\n            this.config.name = v;\n            this.storeNeedsRecalc = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BaseConfigurableImpl.prototype, \"size\", {\n        /**\n         * The size of the database in bytes. Used only in WebSQL for now.\n         * @default 4980736\n         */\n        get: /**\n         * The size of the database in bytes. Used only in WebSQL for now.\n         * \\@default 4980736\n         * @return {?}\n         */\n        function () {\n            return this.config.size || this.baseConfig.size;\n        },\n        set: /**\n         * @param {?} v\n         * @return {?}\n         */\n        function (v) {\n            this.config.size = v;\n            this.storeNeedsRecalc = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BaseConfigurableImpl.prototype, \"storeName\", {\n        /**\n         * The name of the datastore.\n         * In IndexedDB this is the dataStore,\n         * in WebSQL this is the name of the key/value table in the database.\n         * Must be alphanumeric, with underscores.\n         * Any non-alphanumeric characters will be converted to underscores.\n         * @default ng_forage\n         */\n        get: /**\n         * The name of the datastore.\n         * In IndexedDB this is the dataStore,\n         * in WebSQL this is the name of the key/value table in the database.\n         * Must be alphanumeric, with underscores.\n         * Any non-alphanumeric characters will be converted to underscores.\n         * \\@default ng_forage\n         * @return {?}\n         */\n        function () {\n            return this.config.storeName || this.baseConfig.storeName;\n        },\n        set: /**\n         * @param {?} v\n         * @return {?}\n         */\n        function (v) {\n            this.config.storeName = v;\n            this.storeNeedsRecalc = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BaseConfigurableImpl.prototype, \"version\", {\n        /**\n         * The version of your database. May be used for upgrades in the future; currently unused.\n         * @default 1.0\n         */\n        get: /**\n         * The version of your database. May be used for upgrades in the future; currently unused.\n         * \\@default 1.0\n         * @return {?}\n         */\n        function () {\n            return 'version' in this.config ? (/** @type {?} */ (this.config.version)) : this.baseConfig.version;\n        },\n        set: /**\n         * @param {?} v\n         * @return {?}\n         */\n        function (v) {\n            this.config.version = v;\n            this.storeNeedsRecalc = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BaseConfigurableImpl.prototype, \"finalConfig\", {\n        /** @internal */\n        get: /**\n         * \\@internal\n         * @protected\n         * @return {?}\n         */\n        function () {\n            return Object.assign({}, this.baseConfig.config, this.config);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BaseConfigurableImpl.prototype, \"store\", {\n        /** @internal */\n        get: /**\n         * \\@internal\n         * @protected\n         * @return {?}\n         */\n        function () {\n            if (this.storeNeedsRecalc || !this[store$]) {\n                this[store$] = this.fact.getInstance(this.finalConfig);\n                this.storeNeedsRecalc = false;\n            }\n            return this[store$];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Bulk-set configuration options\n     * @param opts The configuration\n     */\n    /**\n     * Bulk-set configuration options\n     * @template THIS\n     * @this {THIS}\n     * @param {?} opts The configuration\n     * @return {THIS}\n     */\n    BaseConfigurableImpl.prototype.configure = /**\n     * Bulk-set configuration options\n     * @template THIS\n     * @this {THIS}\n     * @param {?} opts The configuration\n     * @return {THIS}\n     */\n    function (opts) {\n        opts = opts || {};\n        if (Array.isArray(opts.driver)) {\n            opts.driver = opts.driver.slice();\n        }\n        Object.assign((/** @type {?} */ (this)).config, opts);\n        (/** @type {?} */ (this)).storeNeedsRecalc = true;\n        return (/** @type {?} */ (this));\n    };\n    /**\n     * @return {?}\n     */\n    BaseConfigurableImpl.prototype.toJSON = /**\n     * @return {?}\n     */\n    function () {\n        return {\n            description: this.description,\n            driver: this.driver,\n            name: this.name,\n            size: this.size,\n            storeName: this.storeName,\n            version: this.version\n        };\n    };\n    /**\n     * @return {?}\n     */\n    BaseConfigurableImpl.prototype.toString = /**\n     * @return {?}\n     */\n    function () {\n        return JSON.stringify(this.toJSON());\n    };\n    /** @nocollapse */\n    BaseConfigurableImpl.ctorParameters = function () { return [\n        { type: NgForageConfig, decorators: [{ type: Inject, args: [NgForageConfig,] }] },\n        { type: InstanceFactory, decorators: [{ type: Inject, args: [InstanceFactory,] }] }\n    ]; };\n    return BaseConfigurableImpl;\n}());\nsetToStringTag(BaseConfigurableImpl, 'BaseConfigurable');\nObject.defineProperty((/** @type {?} */ (BaseConfigurableImpl)), 'storeNeedsRecalc', {\n    configurable: true,\n    enumerable: true,\n    value: true,\n    writable: true\n});\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Cache instance\n */\nvar NgForage = /** @class */ (function (_super) {\n    __extends(NgForage, _super);\n    function NgForage() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Object.defineProperty(NgForage.prototype, \"activeDriver\", {\n        /**\n         * Returns the name of the driver being used, or null if none can be used.\n         */\n        get: /**\n         * Returns the name of the driver being used, or null if none can be used.\n         * @return {?}\n         */\n        function () {\n            return this.store.driver();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Removes every key from the database, returning it to a blank slate.\n     *\n     * clear() will remove <b>every item in the offline store</b>. Use this method with caution.\n     */\n    /**\n     * Removes every key from the database, returning it to a blank slate.\n     *\n     * clear() will remove <b>every item in the offline store</b>. Use this method with caution.\n     * @return {?}\n     */\n    NgForage.prototype.clear = /**\n     * Removes every key from the database, returning it to a blank slate.\n     *\n     * clear() will remove <b>every item in the offline store</b>. Use this method with caution.\n     * @return {?}\n     */\n    function () {\n        return this.store.clear();\n    };\n    /**\n     * Make a clone of the instance\n     * @param config Optional configuration\n     */\n    /**\n     * Make a clone of the instance\n     * @param {?=} config Optional configuration\n     * @return {?}\n     */\n    NgForage.prototype.clone = /**\n     * Make a clone of the instance\n     * @param {?=} config Optional configuration\n     * @return {?}\n     */\n    function (config) {\n        /** @type {?} */\n        var inst = new NgForage(this.baseConfig, this.fact);\n        inst.configure(Object.assign(this.finalConfig, config || {}));\n        return inst;\n    };\n    /**\n     * Gets an item from the storage library.\n     * If the key does not exist, getItem() will return null.\n     * @param key Data key\n     */\n    /**\n     * Gets an item from the storage library.\n     * If the key does not exist, getItem() will return null.\n     * @template T\n     * @param {?} key Data key\n     * @return {?}\n     */\n    NgForage.prototype.getItem = /**\n     * Gets an item from the storage library.\n     * If the key does not exist, getItem() will return null.\n     * @template T\n     * @param {?} key Data key\n     * @return {?}\n     */\n    function (key) {\n        return this.store.getItem(key);\n    };\n    /**\n     * Iterate over all value/key pairs in datastore.\n     * <i>iteratee</i> is called once for each pair, with the following arguments:\n     * <ol>\n     *   <li>Value</li>\n     *   <li>Key</li>\n     *   <li>iterationNumber - one-based number</li>\n     * </ol>\n     * iterate() supports early exit by returning non undefined value inside iteratorCallback callback.\n     * @param iteratee\n     */\n    /**\n     * Iterate over all value/key pairs in datastore.\n     * <i>iteratee</i> is called once for each pair, with the following arguments:\n     * <ol>\n     *   <li>Value</li>\n     *   <li>Key</li>\n     *   <li>iterationNumber - one-based number</li>\n     * </ol>\n     * iterate() supports early exit by returning non undefined value inside iteratorCallback callback.\n     * @template T, U\n     * @param {?} iteratee\n     * @return {?}\n     */\n    NgForage.prototype.iterate = /**\n     * Iterate over all value/key pairs in datastore.\n     * <i>iteratee</i> is called once for each pair, with the following arguments:\n     * <ol>\n     *   <li>Value</li>\n     *   <li>Key</li>\n     *   <li>iterationNumber - one-based number</li>\n     * </ol>\n     * iterate() supports early exit by returning non undefined value inside iteratorCallback callback.\n     * @template T, U\n     * @param {?} iteratee\n     * @return {?}\n     */\n    function (iteratee) {\n        return this.store.iterate(iteratee);\n    };\n    /**\n     * Get the name of a key based on its ID.\n     * @param index\n     */\n    /**\n     * Get the name of a key based on its ID.\n     * @param {?} index\n     * @return {?}\n     */\n    NgForage.prototype.key = /**\n     * Get the name of a key based on its ID.\n     * @param {?} index\n     * @return {?}\n     */\n    function (index) {\n        return this.store.key(index);\n    };\n    /**\n     * Get the list of all keys in the datastore.\n     */\n    /**\n     * Get the list of all keys in the datastore.\n     * @return {?}\n     */\n    NgForage.prototype.keys = /**\n     * Get the list of all keys in the datastore.\n     * @return {?}\n     */\n    function () {\n        return this.store.keys();\n    };\n    /**\n     * Gets the number of keys in the offline store (i.e. its “length”).\n     */\n    /**\n     * Gets the number of keys in the offline store (i.e. its “length”).\n     * @return {?}\n     */\n    NgForage.prototype.length = /**\n     * Gets the number of keys in the offline store (i.e. its “length”).\n     * @return {?}\n     */\n    function () {\n        return this.store.length();\n    };\n    /**\n     * Even though localForage queues up all of its data API method calls,\n     * ready() provides a way to determine whether the asynchronous driver initialization process has finished.\n     * That’s useful in cases like when we want to know which driver localForage has settled down using.\n     */\n    /**\n     * Even though localForage queues up all of its data API method calls,\n     * ready() provides a way to determine whether the asynchronous driver initialization process has finished.\n     * That’s useful in cases like when we want to know which driver localForage has settled down using.\n     * @return {?}\n     */\n    NgForage.prototype.ready = /**\n     * Even though localForage queues up all of its data API method calls,\n     * ready() provides a way to determine whether the asynchronous driver initialization process has finished.\n     * That’s useful in cases like when we want to know which driver localForage has settled down using.\n     * @return {?}\n     */\n    function () {\n        return this.store.ready();\n    };\n    /**\n     * Removes the value of a key from the offline store.\n     * @param key Data key\n     */\n    /**\n     * Removes the value of a key from the offline store.\n     * @param {?} key Data key\n     * @return {?}\n     */\n    NgForage.prototype.removeItem = /**\n     * Removes the value of a key from the offline store.\n     * @param {?} key Data key\n     * @return {?}\n     */\n    function (key) {\n        return this.store.removeItem(key);\n    };\n    /**\n     * Saves data to an offline store. You can store the following types of JavaScript objects:\n     * <ul>\n     *  <li>Array</li>\n     *  <li>ArrayBuffer</li>\n     *  <li>Blob</li>\n     *  <li>Float32Array</li>\n     *  <li>Float64Array</li>\n     *  <li>Int8Array</li>\n     *  <li>Int16Array</li>\n     *  <li>Int32Array</li>\n     *  <li>Number</li>\n     *  <li>Object</li>\n     *  <li>Uint8Array</li>\n     *  <li>Uint8ClampedArray</li>\n     *  <li>Uint16Array</li>\n     *  <li>Uint32Array</li>\n     *  <li>String</li>\n     * </ul>\n     * @param key Data key\n     * @param data Data\n     */\n    /**\n     * Saves data to an offline store. You can store the following types of JavaScript objects:\n     * <ul>\n     *  <li>Array</li>\n     *  <li>ArrayBuffer</li>\n     *  <li>Blob</li>\n     *  <li>Float32Array</li>\n     *  <li>Float64Array</li>\n     *  <li>Int8Array</li>\n     *  <li>Int16Array</li>\n     *  <li>Int32Array</li>\n     *  <li>Number</li>\n     *  <li>Object</li>\n     *  <li>Uint8Array</li>\n     *  <li>Uint8ClampedArray</li>\n     *  <li>Uint16Array</li>\n     *  <li>Uint32Array</li>\n     *  <li>String</li>\n     * </ul>\n     * @template T\n     * @param {?} key Data key\n     * @param {?} data Data\n     * @return {?}\n     */\n    NgForage.prototype.setItem = /**\n     * Saves data to an offline store. You can store the following types of JavaScript objects:\n     * <ul>\n     *  <li>Array</li>\n     *  <li>ArrayBuffer</li>\n     *  <li>Blob</li>\n     *  <li>Float32Array</li>\n     *  <li>Float64Array</li>\n     *  <li>Int8Array</li>\n     *  <li>Int16Array</li>\n     *  <li>Int32Array</li>\n     *  <li>Number</li>\n     *  <li>Object</li>\n     *  <li>Uint8Array</li>\n     *  <li>Uint8ClampedArray</li>\n     *  <li>Uint16Array</li>\n     *  <li>Uint32Array</li>\n     *  <li>String</li>\n     * </ul>\n     * @template T\n     * @param {?} key Data key\n     * @param {?} data Data\n     * @return {?}\n     */\n    function (key, data) {\n        return this.store.setItem(key, data);\n    };\n    /**\n     * Check whether the given driver is supported/registered.\n     * @param driver Driver name\n     */\n    /**\n     * Check whether the given driver is supported/registered.\n     * @param {?} driver Driver name\n     * @return {?}\n     */\n    NgForage.prototype.supports = /**\n     * Check whether the given driver is supported/registered.\n     * @param {?} driver Driver name\n     * @return {?}\n     */\n    function (driver) {\n        return this.store.supports((/** @type {?} */ (driver)));\n    };\n    NgForage.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] }\n    ];\n    /** @nocollapse */ NgForage.ngInjectableDef = defineInjectable({ factory: function NgForage_Factory() { return new NgForage(inject(NgForageConfig), inject(InstanceFactory)); }, token: NgForage, providedIn: \"root\" });\n    return NgForage;\n}(BaseConfigurableImpl));\nsetToStringTag(NgForage);\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@internal\n * @param {?} mainKey\n * @return {?}\n */\nfunction calculateCacheKeys(mainKey) {\n    return {\n        data: mainKey + \"_data\",\n        expiry: mainKey + \"_expiry\"\n    };\n}\n/**\n * \\@internal\n * @template T\n * @param {?} r\n * @return {?}\n */\nfunction toCachedItem(r) {\n    return new CachedItemImpl(r[0], r[1]);\n}\n/**\n * \\@internal\n * @template T\n * @param {?} r\n * @return {?}\n */\nfunction head(r) {\n    return r[0];\n}\n/**\n * \\@internal\n * @return {?}\n */\n// tslint:disable-next-line:no-empty\nfunction toVoid() {\n}\n/**\n * An extension of {\\@link NgForage} which adds expiration support\n */\nvar NgForageCache = /** @class */ (function (_super) {\n    __extends(NgForageCache, _super);\n    function NgForageCache() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Object.defineProperty(NgForageCache.prototype, \"cacheTime\", {\n        /**\n         * Cache time in milliseconds\n         * @default 300000\n         */\n        get: /**\n         * Cache time in milliseconds\n         * \\@default 300000\n         * @return {?}\n         */\n        function () {\n            return this.config.cacheTime || this.baseConfig.cacheTime;\n        },\n        set: /**\n         * @param {?} t\n         * @return {?}\n         */\n        function (t) {\n            this.config.cacheTime = t;\n            this.storeNeedsRecalc = true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** @inheritDoc */\n    /**\n     * @inheritDoc\n     * @param {?=} config\n     * @return {?}\n     */\n    NgForageCache.prototype.clone = /**\n     * @inheritDoc\n     * @param {?=} config\n     * @return {?}\n     */\n    function (config) {\n        /** @type {?} */\n        var inst = new NgForageCache(this.baseConfig, this.fact);\n        inst.configure(Object.assign(this.finalConfig, config || {}));\n        return inst;\n    };\n    /**\n     * Retrieve data\n     * @param key Data key\n     */\n    /**\n     * Retrieve data\n     * @template T\n     * @param {?} key Data key\n     * @return {?}\n     */\n    NgForageCache.prototype.getCached = /**\n     * Retrieve data\n     * @template T\n     * @param {?} key Data key\n     * @return {?}\n     */\n    function (key) {\n        /** @type {?} */\n        var keys = calculateCacheKeys(key);\n        /** @type {?} */\n        var dataPromise = this.getItem(keys.data);\n        /** @type {?} */\n        var expiryPromise = this.getItem(keys.expiry);\n        return Promise.all([dataPromise, expiryPromise]).then(toCachedItem);\n    };\n    /**\n     * Remove data\n     * @param key Data key\n     */\n    /**\n     * Remove data\n     * @param {?} key Data key\n     * @return {?}\n     */\n    NgForageCache.prototype.removeCached = /**\n     * Remove data\n     * @param {?} key Data key\n     * @return {?}\n     */\n    function (key) {\n        /** @type {?} */\n        var keys = calculateCacheKeys(key);\n        /** @type {?} */\n        var dataPromise = this.removeItem(keys.data);\n        /** @type {?} */\n        var expiryPromise = this.removeItem(keys.expiry);\n        return Promise.all([dataPromise, expiryPromise]).then(toVoid);\n    };\n    /**\n     * Set data\n     * @param key Data key\n     * @param data Data to set\n     * @param [cacheTime] Override cache set in {@link CacheConfigurable#cacheTime global or instance config}.\n     */\n    /**\n     * Set data\n     * @template T\n     * @param {?} key Data key\n     * @param {?} data Data to set\n     * @param {?=} cacheTime\n     * @return {?}\n     */\n    NgForageCache.prototype.setCached = /**\n     * Set data\n     * @template T\n     * @param {?} key Data key\n     * @param {?} data Data to set\n     * @param {?=} cacheTime\n     * @return {?}\n     */\n    function (key, data, cacheTime) {\n        /** @type {?} */\n        var keys = calculateCacheKeys(key);\n        /** @type {?} */\n        var expiry = typeof cacheTime === 'number' ? cacheTime : this.cacheTime;\n        /** @type {?} */\n        var dataPromise = this.setItem(keys.data, data);\n        /** @type {?} */\n        var expiryPromise = this.setItem(keys.expiry, Date.now() + expiry);\n        return Promise.all([dataPromise, expiryPromise]).then(head);\n    };\n    /** @internal */\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    NgForageCache.prototype.toJSON = /**\n     * \\@internal\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */\n        var ass = { cacheTime: this.cacheTime };\n        return Object.assign(_super.prototype.toJSON.call(this), ass);\n    };\n    NgForageCache.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] }\n    ];\n    /** @nocollapse */ NgForageCache.ngInjectableDef = defineInjectable({ factory: function NgForageCache_Factory() { return new NgForageCache(inject(NgForageConfig), inject(InstanceFactory)); }, token: NgForageCache, providedIn: \"root\" });\n    return NgForageCache;\n}(NgForage));\nsetToStringTag(NgForageCache);\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@internal\n */\nvar  /**\n * \\@internal\n */\nNgForageCacheDedicated = /** @class */ (function (_super) {\n    __extends(NgForageCacheDedicated, _super);\n    function NgForageCacheDedicated() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?=} config\n     * @return {?}\n     */\n    NgForageCacheDedicated.prototype.clone = /**\n     * @param {?=} config\n     * @return {?}\n     */\n    function (config) {\n        /** @type {?} */\n        var inst = new NgForageCacheDedicated(this.baseConfig, this.fact);\n        inst.configure(Object.assign(this.finalConfig, config || {}));\n        return inst;\n    };\n    return NgForageCacheDedicated;\n}(NgForageCache));\nsetToStringTag(NgForageCacheDedicated, 'NgForageCache (dedicated)');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@internal\n */\nvar  /**\n * \\@internal\n */\nNgForageDedicated = /** @class */ (function (_super) {\n    __extends(NgForageDedicated, _super);\n    function NgForageDedicated() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @param {?=} config\n     * @return {?}\n     */\n    NgForageDedicated.prototype.clone = /**\n     * @param {?=} config\n     * @return {?}\n     */\n    function (config) {\n        /** @type {?} */\n        var inst = new NgForageDedicated(this.baseConfig, this.fact);\n        inst.configure(Object.assign(this.finalConfig, config || {}));\n        return inst;\n    };\n    return NgForageDedicated;\n}(NgForage));\nsetToStringTag(NgForageDedicated, 'NgForage (dedicated)');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * \\@internal\n * @type {?}\n */\nvar conf$$1 = Symbol('NgForageConfig');\n/**\n * \\@internal\n * @type {?}\n */\nvar if$ = Symbol('InstanceFactory');\nvar DedicatedInstanceFactory = /** @class */ (function () {\n    function DedicatedInstanceFactory(conf, instFact) {\n        this[conf$$1] = conf;\n        this[if$] = instFact;\n    }\n    /**\n     * @param {?=} config\n     * @return {?}\n     */\n    DedicatedInstanceFactory.prototype.createCache = /**\n     * @param {?=} config\n     * @return {?}\n     */\n    function (config) {\n        /** @type {?} */\n        var inst = new NgForageCacheDedicated(this[conf$$1], this[if$]);\n        if (config) {\n            inst.configure(config);\n        }\n        return inst;\n    };\n    /**\n     * @param {?=} config\n     * @return {?}\n     */\n    DedicatedInstanceFactory.prototype.createNgForage = /**\n     * @param {?=} config\n     * @return {?}\n     */\n    function (config) {\n        /** @type {?} */\n        var inst = new NgForageDedicated(this[conf$$1], this[if$]);\n        if (config) {\n            inst.configure(config);\n        }\n        return inst;\n    };\n    DedicatedInstanceFactory.decorators = [\n        { type: Injectable, args: [{ providedIn: 'root' },] }\n    ];\n    /** @nocollapse */\n    DedicatedInstanceFactory.ctorParameters = function () { return [\n        { type: NgForageConfig },\n        { type: InstanceFactory }\n    ]; };\n    /** @nocollapse */ DedicatedInstanceFactory.ngInjectableDef = defineInjectable({ factory: function DedicatedInstanceFactory_Factory() { return new DedicatedInstanceFactory(inject(NgForageConfig), inject(InstanceFactory)); }, token: DedicatedInstanceFactory, providedIn: \"root\" });\n    return DedicatedInstanceFactory;\n}());\nsetToStringTag(DedicatedInstanceFactory);\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * NgForage core module\n */\nvar NgForageModule = /** @class */ (function () {\n    function NgForageModule() {\n    }\n    // istanbul ignore next\n    // istanbul ignore next\n    /**\n     * @param {?=} config\n     * @return {?}\n     */\n    NgForageModule.forRoot = \n    // istanbul ignore next\n    /**\n     * @param {?=} config\n     * @return {?}\n     */\n    function (config) {\n        return {\n            ngModule: NgForageModule,\n            providers: [\n                {\n                    provide: DEFAULT_CONFIG,\n                    useValue: config ? Object.assign({}, config) : {}\n                }\n            ]\n        };\n    };\n    NgForageModule.decorators = [\n        { type: NgModule, args: [{},] }\n    ];\n    return NgForageModule;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { DEFAULT_CONFIG, CachedItemImpl, NgForageCache, BaseConfigurableImpl, NgForageConfig, DedicatedInstanceFactory, NgForageCacheDedicated, NgForageDedicated, InstanceFactory, NgForage, NgForageModule, Driver };\n"]}